'use client';

import * as React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Loader2, Upload } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

import { detectMalwareInFile, type DetectMalwareInFileOutput } from '@/ai/flows/detect-malware-in-file-snippet';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ResultCard } from '@/components/result-card';

const formSchema = z.object({
  file: z.instanceof(File).refine((file) => file.size > 0, 'Please upload a file.').nullable(),
});

export function MalwareAnalyzerForm() {
  const [result, setResult] = React.useState<DetectMalwareInFileOutput | null>(null);
  const [isLoading, setIsLoading] = React.useState(false);
  const { toast } = useToast();
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      file: null,
    },
  });

  const file = form.watch('file');

  const fileToDataUri = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    if (!values.file) return;

    setIsLoading(true);
    setResult(null);
    try {
      const fileDataUri = await fileToDataUri(values.file);
      const analysisResult = await detectMalwareInFile({ fileDataUri });
      setResult(analysisResult);
      form.reset();
    } catch (e) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'An error occurred during analysis. Please try again.',
      });
      console.error(e);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>Malware Analyzer</CardTitle>
          <CardDescription>Upload a file to analyze its content for malware signatures.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                <FormField
                  control={form.control}
                  name="file"
                  render={({ field: { onChange, onBlur, name, ref } }) => (
                    <FormItem>
                      <FormLabel>File Upload</FormLabel>
                      <FormControl>
                        <div 
                          className="flex items-center justify-center w-full p-6 border-2 border-dashed rounded-lg cursor-pointer hover:border-primary/50 transition-colors"
                          onClick={() => fileInputRef.current?.click()}
                        >
                            <div className="text-center">
                                {file ? (
                                    <p className="text-sm text-foreground">{file.name}</p>
                                ) : (
                                    <>
                                        <Upload className="w-10 h-10 mx-auto text-muted-foreground" />
                                        <p className="mt-2 text-sm text-muted-foreground">
                                          <span className="font-semibold">Click to upload</span> or drag and drop
                                        </p>
                                        <p className="text-xs text-muted-foreground">Any file type, up to 10MB</p>
                                    </>
                                )}
                            </div>
                            <Input
                                name={name}
                                type="file"
                                className="hidden"
                                ref={fileInputRef}
                                onBlur={onBlur}
                                onChange={(e) => {
                                    const file = e.target.files?.[0];
                                    if (file) {
                                        onChange(file);
                                    }
                                }}
                            />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              <Button type="submit" disabled={isLoading || !file}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Analyze File
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {result && <ResultCard result={result} />}
    </>
  );
}
