'use server';

/**
 * @fileOverview An AI agent that analyzes a file's content to detect malware signatures.
 *
 * - detectMalwareInFile - A function that handles the malware detection process.
 * - DetectMalwareInFileInput - The input type for the detectMalwareInFile function.
 * - DetectMalwareInFileOutput - The return type for the detectMalwareInFile function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectMalwareInFileInputSchema = z.object({
  fileDataUri: z
    .string()
    .describe(
      "A file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type DetectMalwareInFileInput = z.infer<
  typeof DetectMalwareInFileInputSchema
>;

const DetectMalwareInFileOutputSchema = z.object({
  summary: z
    .string()
    .describe(
      'A brief analysis, noting any suspicious functions or obfuscated code found in the content. If the file is not malicious, state that it appears to be safe.'
    ),
  verdict: z.enum(['Safe', 'Malicious']).describe('A single definitive word.'),
});
export type DetectMalwareInFileOutput = z.infer<
  typeof DetectMalwareInFileOutputSchema
>;

export async function detectMalwareInFile(
  input: DetectMalwareInFileInput
): Promise<DetectMalwareInFileOutput> {
  return detectMalwareInFileFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectMalwareInFilePrompt',
  input: {schema: DetectMalwareInFileInputSchema},
  output: {schema: DetectMalwareInFileOutputSchema},
  prompt: `You are an expert malware analyst. You will analyze the content of the provided file to detect signatures, patterns, or code structures indicative of malware. The file content is provided as a data URI.

  File: {{{media url=fileDataUri}}}

  Based on your analysis, provide a brief summary of your findings and a verdict ("Safe" or "Malicious").

  Ensure the output is a JSON object conforming to the following schema:
  ${JSON.stringify(DetectMalwareInFileOutputSchema.describe(''))}`,
});

const detectMalwareInFileFlow = ai.defineFlow(
  {
    name: 'detectMalwareInFileFlow',
    inputSchema: DetectMalwareInFileInputSchema,
    outputSchema: DetectMalwareInFileOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
