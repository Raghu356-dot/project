'use server';

/**
 * @fileOverview An AI agent that analyzes a snippet of a file's content to detect malware signatures.
 *
 * - detectMalwareInFileSnippet - A function that handles the malware detection process.
 * - DetectMalwareInFileSnippetInput - The input type for the detectMalwareInFileSnippet function.
 * - DetectMalwareInFileSnippetOutput - The return type for the detectMalwareInFileSnippet function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectMalwareInFileSnippetInputSchema = z.object({
  filename: z.string().describe('The name of the file being analyzed.'),
  fileContentSnippet: z
    .string()
    .describe('The first 500 characters of the file content.'),
});
export type DetectMalwareInFileSnippetInput = z.infer<
  typeof DetectMalwareInFileSnippetInputSchema
>;

const DetectMalwareInFileSnippetOutputSchema = z.object({
  isMalicious: z.boolean().describe('Whether the file content is malicious.'),
  threatType: z
    .string()
    .describe(
      'A category for the threat, such as Virus, Trojan, Ransomware, or Benign.'
    ),
  summary: z
    .string()
    .describe(
      'A brief analysis, noting any suspicious functions or obfuscated code found in the content snippet.'
    ),
  verdict: z.enum(['Safe', 'Malicious']).describe('A single definitive word.'),
  advice:
    z.string().describe('A clear, one-sentence recommendation for the user.'),
});
export type DetectMalwareInFileSnippetOutput = z.infer<
  typeof DetectMalwareInFileSnippetOutputSchema
>;

export async function detectMalwareInFileSnippet(
  input: DetectMalwareInFileSnippetInput
): Promise<DetectMalwareInFileSnippetOutput> {
  return detectMalwareInFileSnippetFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectMalwareInFileSnippetPrompt',
  input: {schema: DetectMalwareInFileSnippetInputSchema},
  output: {schema: DetectMalwareInFileSnippetOutputSchema},
  prompt: `You are an expert malware analyst. You will analyze a snippet of a file's content to detect signatures, patterns, or code structures indicative of malware.\n\n  Filename: {{{filename}}}\n  File Content Snippet: {{{fileContentSnippet}}}\n\n  Based on your analysis, determine if the file is malicious. Provide a brief summary of your findings, the threat type (Virus, Trojan, Ransomware, or Benign), a verdict (Safe or Malicious), and a one-sentence recommendation.\n\n  Ensure the output is a JSON object conforming to the following schema:\n  {
    "isMalicious": boolean,
    "threatType": string,
    "summary": string,
    "verdict": "Safe" | "Malicious",
    "advice": string
  }`,
});

const detectMalwareInFileSnippetFlow = ai.defineFlow(
  {
    name: 'detectMalwareInFileSnippetFlow',
    inputSchema: DetectMalwareInFileSnippetInputSchema,
    outputSchema: DetectMalwareInFileSnippetOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
